/* USER CODE BEGIN Header */
/**
 ****************************************************************************************************
 * @file        main.c
 * @author      ALIENTEK
 * @brief       TFTLCD_MCU code
 * @license     Copyright (C) 2020-2032, ALIENTEK
 ****************************************************************************************************
 * @attention
 *
 * platform     : ALIENTEK M144-STM32F407 board
 * website      : https://www.alientek.com
 * forum        : http://www.openedv.com/forum.php
 *
 * change logs  :
 * version    data    notes
 * V1.0     20240410  the first version
 *
 ****************************************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dcmi.h"
#include "dma.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include "fsmc.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "../../BSP/LED/led.h"
#include "../../BSP/KEY/key.h"
#include "../../BSP/LCD/lcd.h"
#include "../../SYSTEM/delay/delay.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* OV2640 output data format
 * 0: RGB565 format
 * 1: JPEG format
 */
static uint8_t g_ov_mode;

/* JPEG related Data cache definition */
#define JPEG_BUF_SIZE   (29 * 1024)                                             /* Size of the JPEG data buffer */
#define JPEG_LINE_SIZE  (1 * 1024)                                              /* Size of the double buffer for JPEG data DMA */
static uint32_t g_jpeg_data_buf[JPEG_BUF_SIZE] __attribute__((aligned(4)));     /* Buffer for JPEG data */
static uint32_t g_dcmi_line_buf[2][JPEG_LINE_SIZE] __attribute__((aligned(4))); /* Double buffer for JPEG data DMA */
volatile uint32_t g_jpeg_data_len = 0;                                          /* Length of valid data in the JPEG data buffer */


/* JPEG数据采集完成标志
 * 0: 采集未完�?
 * 1: 采集完成，但还未处理
 * 2: 处理完成，可以开始接收下�?�?
 */
volatile uint8_t g_jpeg_data_ok = 0;

/* JPEG图片�?13种尺寸名�? */
static const char *jpeg_size_tbl[13] = {"QQVGA", "QCIF", "QVGA", "WGVGA", "CIF", "VGA", "SVGA", "XGA", "WXGA", "SVGA", "WXGA+", "SXGA", "UXGA"};

/* JPEG图片�?13种尺寸参�? */
static const uint16_t jpeg_img_size_tbl[][2] = {
    { 160,  120},   /* QQVGA */
    { 176,  144},   /* QCIF */
    { 320,  240},   /* QVGA */
    { 400,  240},   /* WGVGA */
    { 352,  288},   /* CIF */
    { 640,  480},   /* VGA */
    { 800,  600},   /* SVGA */
    {1024,  768},   /* XGA */
    {1280,  800},   /* WXGA */
    {1280,  960},   /* XVGA */
    {1440,  900},   /* WXGA+ */
    {1280, 1024},   /* SXGA */
    {1600, 1200},   /* UXGA */
};

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/**
 * @bref        处理JPEG数据
 * @note        在DCMI捕获中断中调�?
 * @param       �?
 * @retval      �?
 */
void jpeg_data_process(void)
{
    uint16_t rlen;
    uint32_t *pbuf;
    uint16_t i;

    if (g_ov_mode != 0)                                                         /* JPEG模式 */
    {
        if (g_jpeg_data_ok == 0)                                                /* 还未采集JPEG数据 */
        {
            __HAL_DMA_DISABLE(&hdma_dcmi);                              /* 禁用DCMI传出使用的DMA数据�? */
            while (DMA2_Stream1->CR & 0x01);                                    /* 等待DMA可配�? */

            rlen = JPEG_LINE_SIZE - __HAL_DMA_GET_COUNTER(&hdma_dcmi);  /* 计算剩余长度 */
            pbuf = g_jpeg_data_buf + g_jpeg_data_len;                           /* 偏移到JPEG数据缓存中有效数据的末尾，继续添加新的JPEG数据 */

            if (DMA2_Stream1->CR & (1 << 19))                                   /* DMA正在处理存储�?1，因此从存储�?1中读取数�? */
            {
                for (i=0; i<rlen; i++)
                {
                    pbuf[i] = g_dcmi_line_buf[1][i];
                }
            }
            else                                                                /* DMA正在处理存储�?0，因此从存储�?0中读取数�? */
            {
                for (i=0; i<rlen; i++)
                {
                    pbuf[i] = g_dcmi_line_buf[0][i];
                }
            }
            g_jpeg_data_len += rlen;                                            /* 更新JPEG数据缓存区中有效数据的长�? */
            g_jpeg_data_ok = 1;                                                 /* 标记已采集JPEG数据 */
        }
        else if (g_jpeg_data_ok == 2)                                           /* 上一次采集的JPEG数据已处理完�? */
        {
            __HAL_DMA_SET_COUNTER(&hdma_dcmi, JPEG_LINE_SIZE);          /* 设置DMA传输的数据项数目 */
            __HAL_DMA_ENABLE(&hdma_dcmi);                               /* 使能DMA数据�? */
            g_jpeg_data_len = 0;                                                /* �?始新的JPEG数据接收 */
            g_jpeg_data_ok = 0;                                                 /* 标记还未采集JPEG数据 */
        }
    }
    else                                                                /* RGB565模式 */
    {
        lcd_set_cursor(0, 0);                                           /* 设置光标位置 */
        lcd_write_ram_prepare();                                        /* 准备写GRAM */
    }
}

/**
 * @bref        JPEG数据处理回调
 * @note        仅使用双缓冲区模式时使用，在DMA传输完成中断中调�?
 * @param       �?
 * @retval      �?
 */
static void jpeg_dcmi_rx_callback(void)
{
    uint16_t i;
    volatile uint32_t *pbuf;

    pbuf = g_jpeg_data_buf + g_jpeg_data_len;           /* 偏移到有效数据末�? */
    if (DMA2_Stream1->CR & (1 << 19))                   /* DMA正在处理存储�?1，这里处理存储器0的数�? */
    {
        for (i=0; i<JPEG_LINE_SIZE; i++)                /* 复制DMA存储�?0的数据至JPEG数据缓存�? */
        {
            pbuf[i] = g_dcmi_line_buf[0][i];
        }
        g_jpeg_data_len += JPEG_LINE_SIZE;              /* 更新JPEG数据缓存区中有效数据的长�? */
    }
    else                                                /* DMA正在处理存储�?0，这里处理存储器1的数�? */
    {
        for (i=0; i<JPEG_LINE_SIZE; i++)                /* 复制DMA存储�?1的数据至JPEG数据缓存�? */
        {
            pbuf[i] = g_dcmi_line_buf[1][i];
        }
        g_jpeg_data_len += JPEG_LINE_SIZE;              /* 更新JPEG数据缓存区中有效数据的长�? */
    }
}

/**
 * @bref        JPEG模式测试
 * @note        获取OV2640输出的JPEG数据，并通过USART2发�?�至上位�?
 * @param       �?
 * @retval      �?
 */
static void jpeg_test(void)
{
    uint8_t msgbuf[15];                                                             /* 提示信息缓冲�? */
    uint8_t size = 2;                                                               /* 默认使用QVGA�?320*240�? */
    uint8_t contrast = 2;                                                           /* 默认使用正常对比�? */
    uint8_t *p;
    uint32_t jpeglen;
    uint8_t headok;
    uint32_t i;
    uint32_t jpegstart;
    uint8_t key;

    lcd_clear(WHITE);
    lcd_show_string(30, 50, 200, 16, 16, "STM32", RED);
    lcd_show_string(30, 70, 200, 16, 16, "OV2640 JPEG Mode", RED);
    lcd_show_string(30, 100, 200, 16, 16, "KEY0:Contrast", RED);                    /* 对比�? */
    lcd_show_string(30, 120, 200, 16, 16, "WKUP:Size", RED);                        /* 分辨率设�? */
    sprintf((char *)msgbuf, "JPEG Size:%s", jpeg_size_tbl[size]);
    lcd_show_string(30, 140, 200, 16, 16, (char*)msgbuf, RED);                      /* 当前JPEG分辨�? */

    ov2640_jpeg_mode();                                                             /* 配置OV2640为JPEG模式 */
    dcmi_rx_callback = jpeg_dcmi_rx_callback;                                       /* DMA传输完成回调 */
    dcmi_dma_init((uint32_t)g_dcmi_line_buf[0],                                     /* 配置DCMI DMA */
                 (uint32_t)g_dcmi_line_buf[1],
                 JPEG_LINE_SIZE,
                 DMA_MDATAALIGN_WORD,
                 DMA_MINC_ENABLE);
    ov2640_outsize_set(jpeg_img_size_tbl[size][0], jpeg_img_size_tbl[size][1]);     /* 设置图像输出大小 */
    dcmi_start();                                                                   /* 启动DCMI传输 */

    while (1)
    {
        if (g_jpeg_data_ok == 1)                                                    /* JPEG数据采集完成 */
        {
            p = (uint8_t *)g_jpeg_data_buf;
            printf("g_jpeg_data_len:%d\r\n", g_jpeg_data_len << 2);                 /* 打印JPEG数据长度 */
            lcd_show_string(30, 170, 210, 16, 16, "Sending JPEG data...", RED);     /* 提示正在传输JPEG数据 */
            jpeglen = 0;
            headok = 0;

            for (i=0; i<((g_jpeg_data_len << 2) - 1); i++)                          /* 遍历JPEG数据，查找JPEG数据头（0xFF�?0xD8）和JPEG数据尾（0xFF�?0xD9�? */
            {
                if ((p[i] == 0xFF) && (p[i + 1] == 0xD8))                           /* 找到JPEG数据�? */
                {
                    jpegstart = i;
                    headok = 1;
                }

                if (headok != 0)                                                    /* 找到JPEG数据头后，在�?始找JPEG数据�? */
                {
                    if ((p[i] == 0xFF) && (p[i + 1] == 0xD9))                       /* 找到JPEG数据�? */
                    {
                        jpeglen = i - jpegstart + 2;
                        break;
                    }
                }
            }

            if (jpeglen != 0)                                                       /* JPEG数据正常 */
            {
                p += jpegstart;                                                     /* 偏移到JPEG数据头的位置 */
                for (i=0; i<jpeglen; i++)                                           /* 发�?�整个有效的JPEG数据（JPEG数据头打到JPEG数据尾） */
                {
                    USART2->DR = p[i];
                    while ((USART2->SR & 0X40) == 0);
                    key = key_scan(0);                                              /* 任意按键可打断数据发�? */
                    if (key != 0)
                    {
                        break;
                    }
                }
            }

            if (key != 0)
            {
                lcd_show_string(30, 170, 210, 16, 16, "Quit Sending data   ", RED); /* 提示�?出JPEG数据传输 */
                switch (key)
                {
                    case KEY0_PRES: /* 设置对比�? */
                    {
                        contrast++;
                        if (contrast > 4)
                        {
                            contrast = 0;
                        }
                        ov2640_contrast(contrast);
                        sprintf((char *)msgbuf, "Contrast:%d", (int8_t)contrast - 2);
                        break;
                    }
                    case WKUP_PRES: /* 设置分辨�? */
                    {
                        size++;
                        if (size > 12)
                        {
                            size = 0;
                        }
                        ov2640_outsize_set(jpeg_img_size_tbl[size][0], jpeg_img_size_tbl[size][1]);
                        sprintf((char *)msgbuf, "JPEG Size:%s", jpeg_size_tbl[size]);
                    }
                    default:
                    {
                        break;
                    }
                }
                lcd_fill(30, 140, 239, 190 + 16, WHITE);
                lcd_show_string(30, 140, 210, 16, 16, (char*)msgbuf, RED);          /* 显示提示内容 */
                HAL_Delay(800);
            }
            else
            {
                lcd_show_string(30, 170, 210, 16, 16, "Send data complete!!", RED); /* 提示JPEG数据传输结束 */
            }

            g_jpeg_data_ok = 2;                                                     /* 标记JPEG数据处理完成，可以开始接收下�?�? */
        }
    }
}

/**
 * @bref        RGB565模式测试
 * @note        获取OV2640输出的RGB数据，并直接在LCD上显�?
 * @param       �?
 * @retval      �?
 */
static void rgb565_test(void)
{
    uint8_t key;
    uint8_t contrast = 2;   /* 默认使用正常对比�? */
    uint8_t scale = 1;      /* 默认全屏缩放 */
    uint8_t msgbuf[15];     /* 提示信息缓冲�? */

    lcd_clear(WHITE);
    lcd_show_string(30, 50, 200, 16, 16, "STM32", RED);
    lcd_show_string(30, 70, 200, 16, 16, "OV2640 RGB565 Mode", RED);
    lcd_show_string(30, 100, 200, 16, 16, "KEY0:Contrast", RED);            /* 对比度设�? */
    lcd_show_string(30, 160, 200, 16, 16, "WKUP:FullSize/Scale", RED);      /* 缩放设置 */

    ov2640_rgb565_mode();                                                   /* 配置OV2640为RGB565模式 */
    dcmi_dma_init((uint32_t)&(LCD->LCD_RAM),                                /* 配置DCMI DMA */
                 0,
                 1,
                 DMA_MDATAALIGN_HALFWORD,
                 DMA_MINC_DISABLE);
    ov2640_outsize_set(lcddev.width, lcddev.height);                        /* 全屏缩放 */
    dcmi_start();                                                           /* 启动DCMI传输 */

    while (1)
    {
        key = key_scan(0);

        if (key != 0)
        {
            dcmi_stop();                                                    /* 停止DCMI传输 */
            switch (key)
            {
                case KEY0_PRES:                                             /* 设置对比�? */
                {
                    contrast++;
                    if (contrast > 4)
                    {
                        contrast = 0;
                    }
                    ov2640_contrast(contrast);
                    sprintf((char *)msgbuf, "Contrast:%d", (int8_t)contrast - 2);
                    break;
                }
                case WKUP_PRES:                                             /* 设置缩放 */
                {
                    scale = !scale;
                    if (scale == 0)                                         /* 不缩�? */
                    {
                        ov2640_image_win_set((1600 - lcddev.width) >> 1,
                                             (1200 - lcddev.height) >> 1,
                                             lcddev.width,
                                             lcddev.height);
                        ov2640_outsize_set(lcddev.width, lcddev.height);
                        sprintf((char *)msgbuf, "Full Size 1:1");
                    }
                    else                                                    /* 全屏缩放 */
                    {
                        ov2640_image_win_set(0, 0, 1600, 1200);
                        ov2640_outsize_set(lcddev.width, lcddev.height);
                        sprintf((char *)msgbuf, "Scale");
                    }
                }
                default:
                {
                    break;
                }
            }
            lcd_show_string(30, 50, 210, 16, 16, (char*)msgbuf, RED);       /* 显示提示内容 */
            HAL_Delay(800);
            dcmi_start();                                                   /* 重新启动DCMI传输 */
        }
        HAL_Delay(10);
    }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

    uint8_t t = 0;
    uint8_t key;

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  delay_init(168);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART1_UART_Init();
  MX_FSMC_Init();
  MX_TIM6_Init();
  MX_USART2_UART_Init();
  MX_DCMI_Init();
  /* USER CODE BEGIN 2 */

  lcd_init();
  lcd_show_string(30, 50, 200, 16, 16, "STM32", RED);
  lcd_show_string(30, 70, 200, 16, 16, "OV2640 TEST", RED);
  lcd_show_string(30, 90, 200, 16, 16, "ATOM@ALIENTEK", RED);

  while (ov2640_init() != 0)                                      /* Initializes the OV2640 */
  {
      lcd_show_string(30, 130, 200, 16, 16, "OV2640 ERROR ", RED);
      HAL_Delay(200);
      lcd_show_string(30, 130, 200, 16, 16, "Please Check! ", RED);
      HAL_Delay(500);
      LED0_TOGGLE();
  }
  lcd_show_string(30, 130, 200, 16, 16, "OV2640 OK     ", RED);
  ov2640_flash_intctrl();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

      t++;
      key = key_scan(0);

      if (key == KEY0_PRES)                                       /* RGB565 Mode */
      {
          g_ov_mode = 0;
          break;
      }
      else if (key == WKUP_PRES)                                  /* JPEG Mode */
      {
          g_ov_mode = 1;
          break;
      }

      if (t == 100)
      {
          lcd_show_string(30, 150, 230, 16, 16, "KEY0:RGB565  KEY_UP:JPEG", RED);
      }

      else if (t == 200)
      {
          t = 0;
          lcd_fill(30, 150, 230, 150 + 16, WHITE);
          LED0_TOGGLE();
      }

      HAL_Delay(5);

    /* USER CODE BEGIN 3 */
  }

  if (g_ov_mode == 0)
  {
      rgb565_test();                                              /* RGB565 Mode test */
  }
  else
  {
      jpeg_test();                                                /* JPEG Mode test */
  }

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
