/**
 ****************************************************************************************************
 * @file        fattester.c
 * @author      ALIENTEK
 * @brief       fatfs test code
 * @license     Copyright (C) 2020-2032, ALIENTEK
 ****************************************************************************************************
 * @attention
 *
 * platform     : ALIENTEK M144-STM32F407 board
 * website      : https://www.alientek.com
 * forum        : http://www.openedv.com/forum.php
 *
 * change logs  :
 * version    data    notes
 * V1.0     20240410  the first version
 *
 ****************************************************************************************************
 */

#include "string.h"
#include "../../ATK_Middlewares/MALLOC/malloc.h"
#include "usart.h"
#include "exfuns.h"
#include "fattester.h"
#include "sdio.h"


/* If file system testing is supported, enable the following code */
#if USE_FATTESTER == 1

/* FATFS test structure
 * Mainly contains file pointers, file information, directories, read/write buffers, and other information,
 * convenient for use by the test functions inside fattester.c. When file system testing functionality is not needed
 */
_m_fattester fattester;


/**
 * @brief       Initializes the file system testing (allocates memory)
 * @note      	This function must be called once before executing any file system tests.
 *              This function only needs to be successfully called once and does not need to be called repeatedly!!
 * @param       None
 * @retval      Execution result: 0 for success, 1 for failure;
 */
uint8_t mf_init(void)
{
    fattester.file = (FIL *)mymalloc(SRAMIN, sizeof(FIL));      /* Allocate memory for 'file' */
    fattester.fatbuf = (uint8_t *)mymalloc(SRAMIN, 512);        /* Allocate memory for 'fattester.fatbuf' */

    if (fattester.file && fattester.fatbuf)
    {
        return 0;   /* Memory allocation successful */
    }
    else
    {
        mf_free();  /* Free memory */
        return 1;   /* Memory allocation failed */
    }
}

/**
 * @brief       Frees the memory allocated for file system testing
 * @note	    After calling this function, the file system testing functionality will be disabled.
 * @param       None
 * @retval      None
 */
void mf_free(void)
{
    myfree(SRAMIN, fattester.file);
    myfree(SRAMIN, fattester.fatbuf);
}

/**
 * @brief       Registers a work area for a disk
 * @param       path : Disk path, e.g. "0:", "1:"
 * @param       mt   : 0 - Do not register immediately (register later), 1 - Register immediately
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
uint8_t mf_mount(uint8_t *path, uint8_t mt)
{
    return f_mount(&fs[1], (const TCHAR *)path, mt);
}

/**
 * @brief       Opens a file
 * @param       path : Path + file name
 * @param       mode : Open mode
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
uint8_t mf_open(uint8_t *path, uint8_t mode)
{
    uint8_t res;
    res = f_open(fattester.file, (const TCHAR *)path, mode);    /* Open the file */
    return res;
}

/**
 * @brief       Closes the file
 * @param       None
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
uint8_t mf_close(void)
{
    f_close(fattester.file);
    return 0;
}

/**
 * @brief       Reads data
 * @param       len : length to read
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
uint8_t mf_read(uint16_t len)
{
    uint16_t i, t;
    uint8_t res = 0;
    uint16_t tlen = 0;
    uint32_t br = 0;
    printf("\r\nRead fattester.file data is:\r\n");

    for (i = 0; i < len / 512; i++)
    {
        res = f_read(fattester.file, fattester.fatbuf, 512, &br);

        if (res)
        {
            printf("Read Error:%d\r\n", res);
            break;
        }
        else
        {
            tlen += br;

            for (t = 0; t < br; t++)printf("%c", fattester.fatbuf[t]);
        }
    }

    if (len % 512)
    {
        res = f_read(fattester.file, fattester.fatbuf, len % 512, &br);

        if (res)    /* Reading data failed */
        {
            printf("\r\nRead Error:%d\r\n", res);
        }
        else
        {
            tlen += br;

            for (t = 0; t < br; t++)printf("%c", fattester.fatbuf[t]);
        }
    }

    if (tlen)printf("\r\nReaded data len:%d\r\n", tlen);    /* Length of data read */

    printf("Read data over\r\n");
    return res;
}

/**
 * @brief       Writes data
 * @param       pdata : data buffer
 * @param       len   : length to write
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
uint8_t mf_write(uint8_t *pdata, uint16_t len)
{
    uint8_t res;
    uint32_t bw = 0;

    printf("\r\nBegin Write fattester.file...\r\n");
    printf("Write data len:%d\r\n", len);
    res = f_write(fattester.file, pdata, len, &bw);

    if (res)
    {
        printf("Write Error:%d\r\n", res);
    }
    else
    {
        printf("Writed data len:%d\r\n", bw);
    }

    printf("Write data over.\r\n");
    return res;
}

/**
 * @brief       Opens a directory
 * @param       path : path of the directory
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
uint8_t mf_opendir(uint8_t *path)
{
    return f_opendir(&fattester.dir, (const TCHAR *)path);
}

/**
 * @brief       Closes the directory
 * @param       None
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
uint8_t mf_closedir(void)
{
    return f_closedir(&fattester.dir);
}

/**
 * @brief       Reads a directory
 * @param       None
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
uint8_t mf_readdir(void)
{
    uint8_t res;
    res = f_readdir(&fattester.dir, &fattester.fileinfo);   /* Reads information of a file */

    if (res != FR_OK)
    {
        return res;    /* Error occurred */
    }

    printf("\r\n fattester.dir info:\r\n");

    printf("fattester.dir.dptr:%d\r\n", fattester.dir.dptr);
    printf("fattester.dir.obj.id:%d\r\n", fattester.dir.obj.id);
    printf("fattester.dir.obj.sclust:%d\r\n", fattester.dir.obj.sclust);
    printf("fattester.dir.obj.objsize:%lld\r\n", fattester.dir.obj.objsize);
    printf("fattester.dir.clust:%d\r\n", fattester.dir.clust);
    printf("fattester.dir.sect:%d\r\n", fattester.dir.sect);
    printf("fattester.dir.blk_ofs:%d\r\n", fattester.dir.blk_ofs);

    printf("\r\n");
    printf("fattester.file Name is:%s\r\n", fattester.fileinfo.fname);
    printf("fattester.file Size is:%lld\r\n", fattester.fileinfo.fsize);
    printf("fattester.file data is:%d\r\n", fattester.fileinfo.fdate);
    printf("fattester.file time is:%d\r\n", fattester.fileinfo.ftime);
    printf("fattester.file Attr is:%d\r\n", fattester.fileinfo.fattrib);
    printf("\r\n");
    return 0;
}

/**
 * @brief       Traverses files
 * @param       path: path
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
uint8_t mf_scan_files(uint8_t *path)
{
    FRESULT res;
    res = f_opendir(&fattester.dir, (const TCHAR *)path); /* Opens a directory */

    if (res == FR_OK)
    {
        printf("\r\n");

        while (1)
        {
            res = f_readdir(&fattester.dir, &fattester.fileinfo);   /* Reads a file in the directory */

            if (res != FR_OK || fattester.fileinfo.fname[0] == 0)
            {
                break;  /* Error occurred/reached the end, exit */
            }
            
            // if (fattester.fileinfo.fname[0] == '.') continue;    /* Ignore the parent directory */
            printf("%s/", path);    /* Prints the path */
            printf("%s\r\n", fattester.fileinfo.fname); /* Prints the file name */
        }
    }

    return res;
}

/**
 * @brief       Displays the remaining capacity
 * @param       path: path (drive letter)
 * @retval      Remaining capacity (in bytes)
 */
uint32_t mf_showfree(uint8_t *path)
{
    FATFS *fs1;
    uint8_t res;
    uint32_t fre_clust = 0, fre_sect = 0, tot_sect = 0;
    /* Obtains disk information and number of free clusters */
    res = f_getfree((const TCHAR *)path, (DWORD *)&fre_clust, &fs1);

    if (res == 0)
    {
        tot_sect = (fs1->n_fatent - 2) * fs1->csize;/* Obtains total number of sectors */
        fre_sect = fre_clust * fs1->csize;          /* Obtains number of free sectors */
#if _MAX_SS!=512
        tot_sect *= fs1->ssize / 512;
        fre_sect *= fs1->ssize / 512;
#endif

        if (tot_sect < 20480)   /* Total capacity is less than 10 MB */
        {
            /* Print free space in unit of KB (assuming 512 bytes/sector) */
            printf("\r\nTotal capacity:%d KB\r\n"
                   "Free space:%d KB\r\n",
                   tot_sect >> 1, fre_sect >> 1);
        }
        else
        {
            /* Print free space in unit of MB (assuming 512 bytes/sector) */
            printf("\r\nTotal capacity:%d MB\r\n"
                   "Free space:%d MB\r\n",
                   tot_sect >> 11, fre_sect >> 11);
        }
    }

    return fre_sect;
}

/**
 * @brief       Moves the file read/write pointer
 * @param       offset: offset relative to the start address
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
uint8_t mf_lseek(uint32_t offset)
{
    return f_lseek(fattester.file, offset);
}

/**
 * @brief       Reads the current position of the file read/write pointer
 * @param       None
 * @retval      Current position
 */
uint32_t mf_tell(void)
{
    return f_tell(fattester.file);
}

/**
 * @brief       Reads the size of the file
 * @param       None
 * @retval      File size
 */
uint32_t mf_size(void)
{
    return f_size(fattester.file);
}

/**
 * @brief       Creates a directory
 * @param       path: directory path + name
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
uint8_t mf_mkdir(uint8_t *path)
{
    return f_mkdir((const TCHAR *)path);
}

/**
 * @brief       Formats the disk
 * @param       path: disk path, e.g. "0:", "1:"
 * @param       opt: mode, FM_FAT, FM_FAT32, FM_EXFAT, FM_ANY, etc.
 * @param       au: cluster size
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
uint8_t mf_fmkfs(uint8_t *path, uint8_t opt, uint16_t au)
{
    return f_mkfs((const TCHAR *)path, opt, 0, 0, _MAX_SS);    /* Formats using default parameters, workbuf, and minimum _MAX_SS size */
}

/**
 * @brief       Deletes a file/directory
 * @param       path: file/directory path + name
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
uint8_t mf_unlink(uint8_t *path)
{
    return f_unlink((const TCHAR *)path);
}

/**
 * @brief       Renames a file/directory (can also move file to another directory)
 * @param       oldname: previous name
 * @param       newname: new name
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
uint8_t mf_rename(uint8_t *oldname, uint8_t *newname)
{
    return f_rename((const TCHAR *)oldname, (const TCHAR *)newname);
}

/**
 * @brief       Gets the volume label (disk name)
 * @param       path: disk path, e.g. "0:", "1:"
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
void mf_getlabel(uint8_t *path)
{
    uint8_t buf[20];
    uint32_t sn = 0;
    uint8_t res;
    res = f_getlabel((const TCHAR *)path, (TCHAR *)buf, (DWORD *)&sn);

    if (res == FR_OK)
    {
        printf("\r\nThe volume label of disk %s is: %s\r\n", path, buf);
        printf("The serial number of disk %s is: %X\r\n\r\n", path, sn);
    }
    else
    {
        printf("\r\nFailed to get label, error code: %X\r\n", res);
    }
}

/**
 * @brief       Sets the volume label (disk name), up to 11 characters!!, and supports a combination of numbers and uppercase letters as well as Chinese characters, etc.
 * @param       path: disk number + name, e.g. "0:ALIENTEK", "1:OPENEDV"
 * @retval      Execution result (refer to the definitions of FATFS and FRESULT)
 */
void mf_setlabel(uint8_t *path)
{
    uint8_t res;
    res = f_setlabel((const TCHAR *)path);

    if (res == FR_OK)
    {
        printf("\r\nDisk label set successfully: %s\r\n", path);
    }
    else
    {
        printf("\r\nFailed to set disk label, error code: %X\r\n", res);
    }
}

/**
 * @brief       从文件里面读取一段字符串
 * @param       size : 要读取的长度
 * @retval      执行结果(参见FATFS, FRESULT的定义)
 */
void mf_gets(uint16_t size)
{
    TCHAR *rbuf;
    rbuf = f_gets((TCHAR *)fattester.fatbuf, size, fattester.file);

    if (*rbuf == 0)return  ; /* 没有数据读到 */
    else
    {
        printf("\r\nThe String Readed Is:%s\r\n", rbuf);
    }
}

/**
 * @brief       写一个字符到文件(需要 FF_USE_STRFUNC >= 1)
 * @param       c : 要写入的字符
 * @retval      执行结果(参见FATFS, FRESULT的定义)
 */
uint8_t mf_putc(uint8_t c)
{
    return f_putc((TCHAR)c, fattester.file);
}

/**
 * @brief       写字符串到文件(需要 FF_USE_STRFUNC >= 1)
 * @param       str : 要写入的字符串
 * @retval      执行结果(参见FATFS, FRESULT的定义)
 */
uint8_t mf_puts(uint8_t *str)
{
    return f_puts((TCHAR *)str, fattester.file);
}

#endif
