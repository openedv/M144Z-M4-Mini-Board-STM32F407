/**
 ****************************************************************************************************
 * @file        exfuns.c
 * @author      ALIENTEK
 * @brief       fatfs extension code
 * @license     Copyright (C) 2020-2032, ALIENTEK
 ****************************************************************************************************
 * @attention
 *
 * platform     : ALIENTEK M144-STM32F407 board
 * website      : https://www.alientek.com
 * forum        : http://www.openedv.com/forum.php
 *
 * change logs  :
 * version    data    notes
 * V1.0     20240410  the first version
 *
 ****************************************************************************************************
 */

#include "string.h"
#include "../../ATK_Middlewares/MALLOC/malloc.h"
#include "usart.h"
#include "exfuns.h"
#include "fattester.h"


#define FILE_MAX_TYPE_NUM       7       /* Up to FILE_MAX_TYPE_NUM categories */
#define FILE_MAX_SUBT_NUM       7       /* Up to FILE_MAX_SUBT_NUM categories */

/* File Type List */
char *const FILE_TYPE_TBL[FILE_MAX_TYPE_NUM][FILE_MAX_SUBT_NUM] =
{
    {"BIN"},            /* BIN Files */
    {"LRC"},            /* LRC Files */
    {"NES", "SMS"},     /* NES/SMS Files */
    {"TXT", "C", "H"},  /* Text File */
    {"WAV", "MP3", "OGG", "FLAC", "AAC", "WMA", "MID"},   /* Supported Music Files */
    {"BMP", "JPG", "JPEG", "GIF"},  /* Image Files */
    {"AVI"},            /* Video Files */
};
    
/******************************************************************************************/
/* Common File Area, when using malloc /
/* Logical Disk Workspace (Memory must be allocated to fs before calling any FATFS-related functions) */

FATFS *fs[_VOLUMES];

/******************************************************************************************/


/**
 * @brief 	Requests memory for exfuns
 * @param 	None
 * @retval 	0, successful; 1. Failure.
 */
uint8_t exfuns_init(void)
{
    uint8_t i;
    uint8_t res = 0;

    for (i = 0; i < _VOLUMES; i++)
    {
        fs[i] = (FATFS *)mymalloc(SRAMIN, sizeof(FATFS));   /* Allocate memory for workspace of volume i */

        if (!fs[i])
        {
            break;  	/* Break the loop if memory allocation fails */
        }
    }

#if USE_FATTESTER == 1  /* If FAT file system tester is enabled */
    res = mf_init();    /* Initialize the FAT file system tester (allocate memory) */
#endif

    if (i == _VOLUMES && res == 0)
    {
        return 0;   	/* All volumes initialized successfully and FAT tester initialized if enabled */
    }
    else
    {
        return 1;   	/* Failed to initialize one or more volumes or FAT tester */
    }
}

/**
 * @brief 	Converts lowercase letters to uppercase letters and stays the same if it is a number.
 * @param 	c: The letter to convert
 * @retval 	Converted letters, uppercase
 */
//uint8_t exfuns_char_upper(uint8_t c)
//{
//    if (c < 'A')return c;   /* 数字,保持不变. */
//
//    if (c >= 'a')
//    {
//        return c - 0x20;    /* 变为大写. */
//    }
//    else
//    {
//        return c;           /* 大写,保持不变 */
//    }
//}

uint8_t exfuns_char_upper(uint8_t c)
{
    if (c >= 'a' && c <= 'z')
    {
        return c - 0x20;    // Convert to uppercase
    }
    else
    {
        return c;           // Keep digits, uppercase letters, or other characters unchanged
    }
}

/**
 * @brief 	Type of report file
 * @param 	fname: indicates the file name
 * @retval 	File type
 * @arg 	0XFF: indicates the number of an unrecognized file type.
 * @arg 	Others, the highest four digits indicate the category to which it belongs, and the lowest four digits indicate the subclass to which it belongs.
 */
uint8_t exfuns_file_type(char *fname)
{
    uint8_t tbuf[5];
    char *attr = 0;   /* Suffix */
    uint8_t i = 0, j;

    while (i < 250)
    {
        i++;

        if (*fname == '\0')break;   /* Shifted to the end */

        fname++;
    }

    if (i == 250)return 0XFF;   	/* Incorrect string. */

    for (i = 0; i < 5; i++)     	/* gets the suffix */
    {
        fname--;

        if (*fname == '.')
        {
            fname++;
            attr = fname;
            break;
        }
    }

    if (attr == 0)return 0XFF;

    strcpy((char *)tbuf, (const char *)attr);       /* copy */

    for (i = 0; i < 4; i++)tbuf[i] = exfuns_char_upper(tbuf[i]);    /* All caps */

    for (i = 0; i < FILE_MAX_TYPE_NUM; i++)         /* Category comparison */
    {
        for (j = 0; j < FILE_MAX_SUBT_NUM; j++)     /* Subclass comparison */
        {
            if (*FILE_TYPE_TBL[i][j] == 0)break;    /* This group has no members to compare. */

            if (strcmp((const char *)FILE_TYPE_TBL[i][j], (const char *)tbuf) == 0) /* find it */
            {
                return (i << 4) | j;
            }
        }
    }

    return 0XFF;    /* Not found */
}

/**
 * @brief 	Obtain the remaining disk capacity
 * @param 	pdrv: Disk number ("0:"~"9:")
 * @param 	total: Total capacity (KB)
 * @param 	free: Free capacity (KB)
 * @retval 	0, normal; Other, error code
 */
uint8_t exfuns_get_free(char *pdrv, uint32_t *total, uint32_t *free)
{
    FATFS *fs1;
    uint8_t res;
    uint32_t fre_clust = 0, fre_sect = 0, tot_sect = 0;
    
    /* Get disk information and number of free clusters */
    res = (uint32_t)f_getfree((const TCHAR *)pdrv, (DWORD *)&fre_clust, &fs1);

    if (res == 0)
    {
        tot_sect = (fs1->n_fatent - 2) * fs1->csize;    /* Gets the total number of sectors */
        fre_sect = fre_clust * fs1->csize;              /* Gets the number of free sectors */

#if _MAX_SS != 512  /* If the sector size is not 512 bytes, it is converted to 512 bytes */
        tot_sect *= fs1->ssize / 512;
        fre_sect *= fs1->ssize / 512;
#endif
        *total = tot_sect >> 1;     /* The unit is KB */
        *free = fre_sect >> 1;      /* The unit is KB */
    }

    return res;
}

/**
 * @brief 	Copy file
 * @note  	Copy the psrc file to pdst.
 * 		  	Note:  The file size should not exceed 4GB.
 *
 * @param 	fcpymsg: function pointer, used to display information during copy
 * 			pname: file/folder name
 *  		pct: percentage
 *          mode:
 * 				bit0: Updates the file name
 * 				bit1: Update percentage pct
 * 				bit2: Update the folder
 * 			Other: reserved
 * 			Return value: 0, normal; 1, forcibly quit;
 *
 * @param 	psrc: indicates the source file
 * @param 	pdst: target file
 * @param 	totsize: Total size (when totsize is 0, it means only a single file copy)
 * @param 	cpdsize: Size that has been copied.
 * @param 	fwmode: file write mode
 * @arg 	0: 	Does not overwrite the original file
 * @arg 	1: 	Overwrites the original file
 *
 * @retval 	Execution result
 * @arg 	0, normal
 * @arg 	0XFF: Forced exit
 * @arg 	Other, error code
 */
uint8_t exfuns_file_copy(uint8_t(*fcpymsg)(uint8_t *pname, uint8_t pct, uint8_t mode), uint8_t *psrc, uint8_t *pdst, 
                                      uint32_t totsize, uint32_t cpdsize, uint8_t fwmode)
{
    uint8_t res;
    uint16_t br = 0;
    uint16_t bw = 0;
    FIL *fsrc = 0;
    FIL *fdst = 0;
    uint8_t *fbuf = 0;
    uint8_t curpct = 0;
    unsigned long long lcpdsize = cpdsize;
    
    fsrc = (FIL *)mymalloc(SRAMIN, sizeof(FIL));    /* Apply for memory */
    fdst = (FIL *)mymalloc(SRAMIN, sizeof(FIL));
    fbuf = (uint8_t *)mymalloc(SRAMIN, 8192);

    if (fsrc == NULL || fdst == NULL || fbuf == NULL)
    {
        res = 100;  /* The previous value is left for fatfs */
    }
    else
    {
        if (fwmode == 0)
        {
            fwmode = FA_CREATE_NEW;     /* Does not overwrite */
        }
        else 
        {
            fwmode = FA_CREATE_ALWAYS;  /* Overwrites existing files */
        }
        
        res = f_open(fsrc, (const TCHAR *)psrc, FA_READ | FA_OPEN_EXISTING);        /* Opens a read-only file */

        if (res == 0)res = f_open(fdst, (const TCHAR *)pdst, FA_WRITE | fwmode);    /* Start opening the second only after the first one is successfully opened */

        if (res == 0)           /* Both successfully opened */
        {
            if (totsize == 0)   /* Just a single file copy */
            {
                totsize = fsrc->obj.objsize;
                lcpdsize = 0;
                curpct = 0;
            }
            else
            {
                curpct = (lcpdsize * 100) / totsize;            /* Gets the new percentage */
            }
            
            fcpymsg(psrc, curpct, 0X02);                        /* Update percentage */

            while (res == 0)    								/* Start copying */
            {
                res = f_read(fsrc, fbuf, 8192, (UINT *)&br);    /* Source read 512 bytes */

                if (res || br == 0)break;

                res = f_write(fdst, fbuf, (UINT)br, (UINT *)&bw);/* Writes to the destination file */
                lcpdsize += bw;

                if (curpct != (lcpdsize * 100) / totsize)       /* Whether to update the percentage */
                {
                    curpct = (lcpdsize * 100) / totsize;

                    if (fcpymsg(psrc, curpct, 0X02))            /* Update percentage */
                    {
                        res = 0XFF;                             /* Forced exit */
                        break;
                    }
                }

                if (res || bw < br)break;
            }

            f_close(fsrc);
            f_close(fdst);
        }
    }

    myfree(SRAMIN, fsrc); 										/* Release memory */
    myfree(SRAMIN, fdst);
    myfree(SRAMIN, fbuf);
    return res;
}

/**
 * @brief 	Gets the folder under the path
 * @note 	Removes the path altogether, leaving only the folder name.
 * @param 	pname: specifies the detailed path
 * @retval 	0, the path is just a volume label.
 * 			Others, folder name first address
 */
uint8_t *exfuns_get_src_dname(uint8_t *pname)
{
    uint16_t temp = 0;

    while (*pname != 0)
    {
        pname++;
        temp++;
    }

    if (temp < 4)return 0;

    while ((*pname != 0x5c) && (*pname != 0x2f))pname--;

    return ++pname;
}

/**
 * @brief 	Gets the folder size
 * @note: 	The folder size should not exceed 4GB.
 * @param 	pname: specifies the detailed path
 * @retval 	0, the folder size is 0, or an error occurred during reading.
 * 			Other, folder size
 */
uint32_t exfuns_get_folder_size(uint8_t *fdname)
{
#define MAX_PATHNAME_DEPTH  512 + 1     /* Maximum destination file path + filename depth */
    uint8_t res = 0;
    DIR *fddir = 0;         			/* Directory */
    FILINFO *finfo = 0;     			/* File information */
    uint8_t *pathname = 0;  			/* Destination folder path + file name */
    uint16_t pathlen = 0;   			/* Destination path length */
    uint32_t fdsize = 0;

    fddir = (DIR *)mymalloc(SRAMIN, sizeof(DIR));   /* Apply for memory */
    finfo = (FILINFO *)mymalloc(SRAMIN, sizeof(FILINFO));

    if (fddir == NULL || finfo == NULL)res = 100;

    if (res == 0)
    {
        pathname = mymalloc(SRAMIN, MAX_PATHNAME_DEPTH);

        if (pathname == NULL)res = 101;

        if (res == 0)
        {
            pathname[0] = 0;
            strcat((char *)pathname, (const char *)fdname);     /* Replication path */
            res = f_opendir(fddir, (const TCHAR *)fdname);      /* Opens the source directory */

            if (res == 0)   /* Successfully opened the directory */
            {
                while (res == 0)   /* Start copying the contents of the folder */
                {
                    res = f_readdir(fddir, finfo);                  /* Reads a file in the directory */

                    if (res != FR_OK || finfo->fname[0] == 0)break; /* Out */

                    if (finfo->fname[0] == '.')continue;            /* 忽略上级目录 */

                    if (finfo->fattrib & 0X10)   /* 是子目录(文件属性,0X20,归档文件;0X10,子目录;) */
                    {
                        pathlen = strlen((const char *)pathname);   /* 得到当前路径的长度 */
                        strcat((char *)pathname, (const char *)"/");/* 加斜杠 */
                        strcat((char *)pathname, (const char *)finfo->fname);   /* 源路径加上子目录名字 */
                        //printf("\r\nsub folder:%s\r\n",pathname);      /* 打印子目录名 */
                        fdsize += exfuns_get_folder_size(pathname);     /* 得到子目录大小,递归调用 */
                        pathname[pathlen] = 0;                          /* 加入结束符 */
                    }
                    else
                    {
                        fdsize += finfo->fsize; /* 非目录,直接加上文件的大小 */
                    }
                }
            }

            myfree(SRAMIN, pathname);
        }
    }

    myfree(SRAMIN, fddir);
    myfree(SRAMIN, finfo);

    if (res)
    {
        return 0;
    }
    else 
    {
        return fdsize;
    }
}

/**
 * @brief       文件夹复制
 *   @note      将psrc文件夹, 拷贝到pdst文件夹.
 *              注意: 文件大小不要超过4GB.
 *
 * @param       fcpymsg : 函数指针, 用于实现拷贝时的信息显示
 *                  pname:文件/文件夹名
 *                  pct:百分比
 *                  mode:
 *                      bit0 : 更新文件名
 *                      bit1 : 更新百分比pct
 *                      bit2 : 更新文件夹
 *                      其他 : 保留
 *                  返回值: 0, 正常; 1, 强制退出;
 *
 * @param       psrc    : 源文件夹
 * @param       pdst    : 目标文件夹
 *   @note      必须形如"X:"/"X:XX"/"X:XX/XX"之类的. 且要确认上一级文件夹存在
 *
 * @param       totsize : 总大小(当totsize为0的时候,表示仅仅为单个文件拷贝)
 * @param       cpdsize : 已复制了的大小.
 * @param       fwmode  : 文件写入模式
 *   @arg       0: 不覆盖原有的文件
 *   @arg       1: 覆盖原有的文件
 *
 * @retval      执行结果
 *   @arg       0   , 正常
 *   @arg       0XFF, 强制退出
 *   @arg       其他, 错误代码
 */
uint8_t exfuns_folder_copy(uint8_t(*fcpymsg)(uint8_t *pname, uint8_t pct, uint8_t mode), uint8_t *psrc, uint8_t *pdst, 
                           uint32_t *totsize, uint32_t *cpdsize, uint8_t fwmode)
{
#define MAX_PATHNAME_DEPTH 512 + 1  /* 最大目标文件路径+文件名深度 */
    uint8_t res = 0;
    DIR *srcdir = 0;    /* 源目录 */
    DIR *dstdir = 0;    /* 源目录 */
    FILINFO *finfo = 0; /* 文件信息 */
    uint8_t *fn = 0;    /* 长文件名 */

    uint8_t *dstpathname = 0;   /* 目标文件夹路径+文件名 */
    uint8_t *srcpathname = 0;   /* 源文件夹路径+文件名 */

    uint16_t dstpathlen = 0;    /* 目标路径长度 */
    uint16_t srcpathlen = 0;    /* 源路径长度 */


    srcdir = (DIR *)mymalloc(SRAMIN, sizeof(DIR));  /* 申请内存 */
    dstdir = (DIR *)mymalloc(SRAMIN, sizeof(DIR));
    finfo = (FILINFO *)mymalloc(SRAMIN, sizeof(FILINFO));

    if (srcdir == NULL || dstdir == NULL || finfo == NULL)res = 100;

    if (res == 0)
    {
        dstpathname = mymalloc(SRAMIN, MAX_PATHNAME_DEPTH);
        srcpathname = mymalloc(SRAMIN, MAX_PATHNAME_DEPTH);

        if (dstpathname == NULL || srcpathname == NULL)res = 101;

        if (res == 0)
        {
            dstpathname[0] = 0;
            srcpathname[0] = 0;
            strcat((char *)srcpathname, (const char *)psrc);    /* 复制原始源文件路径 */
            strcat((char *)dstpathname, (const char *)pdst);    /* 复制原始目标文件路径 */
            res = f_opendir(srcdir, (const TCHAR *)psrc);       /* 打开源目录 */

            if (res == 0)   /* 打开目录成功 */
            {
                strcat((char *)dstpathname, (const char *)"/"); /* 加入斜杠 */
                fn = exfuns_get_src_dname(psrc);

                if (fn == 0)   /* 卷标拷贝 */
                {
                    dstpathlen = strlen((const char *)dstpathname);
                    dstpathname[dstpathlen] = psrc[0];  /* 记录卷标 */
                    dstpathname[dstpathlen + 1] = 0;    /* 结束符 */
                }
                else strcat((char *)dstpathname, (const char *)fn); /* 加文件名 */

                fcpymsg(fn, 0, 0X04);   /* 更新文件夹名 */
                res = f_mkdir((const TCHAR *)dstpathname);  /* 如果文件夹已经存在,就不创建.如果不存在就创建新的文件夹. */

                if (res == FR_EXIST)res = 0;

                while (res == 0)   /* 开始复制文件夹里面的东东 */
                {
                    res = f_readdir(srcdir, finfo);         /* 读取目录下的一个文件 */

                    if (res != FR_OK || finfo->fname[0] == 0)break; /* 错误了/到末尾了,退出 */

                    if (finfo->fname[0] == '.')continue;    /* 忽略上级目录 */

                    fn = (uint8_t *)finfo->fname;           /* 得到文件名 */
                    dstpathlen = strlen((const char *)dstpathname); /* 得到当前目标路径的长度 */
                    srcpathlen = strlen((const char *)srcpathname); /* 得到源路径长度 */

                    strcat((char *)srcpathname, (const char *)"/"); /* 源路径加斜杠 */

                    if (finfo->fattrib & 0X10)  /* 是子目录(文件属性,0X20,归档文件;0X10,子目录;) */
                    {
                        strcat((char *)srcpathname, (const char *)fn);  /* 源路径加上子目录名字 */
                        res = exfuns_folder_copy(fcpymsg, srcpathname, dstpathname, totsize, cpdsize, fwmode);   /* 拷贝文件夹 */
                    }
                    else     /* 非目录 */
                    {
                        strcat((char *)dstpathname, (const char *)"/"); /* 目标路径加斜杠 */
                        strcat((char *)dstpathname, (const char *)fn);  /* 目标路径加文件名 */
                        strcat((char *)srcpathname, (const char *)fn);  /* 源路径加文件名 */
                        fcpymsg(fn, 0, 0X01);       /* 更新文件名 */
                        res = exfuns_file_copy(fcpymsg, srcpathname, dstpathname, *totsize, *cpdsize, fwmode);  /* 复制文件 */
                        *cpdsize += finfo->fsize;   /* 增加一个文件大小 */
                    }

                    srcpathname[srcpathlen] = 0;    /* 加入结束符 */
                    dstpathname[dstpathlen] = 0;    /* 加入结束符 */
                }
            }

            myfree(SRAMIN, dstpathname);
            myfree(SRAMIN, srcpathname);
        }
    }

    myfree(SRAMIN, srcdir);
    myfree(SRAMIN, dstdir);
    myfree(SRAMIN, finfo);
    return res;
}
